<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="robot">
    <!-- TODO: xacro-ize everything: (http://wiki.ros.org/urdf/Tutorials/Using%20Xacro%20to%20Clean%20Up%20a%20URDF%20File) -->

    <xacro:property name="base_radius" value="0.085"/>
    <xacro:property name="base_height" value="0.1393"/>

    <xacro:property name="wheel_radius" value="0.03"/>
    <xacro:property name="wheel_thickness" value="0.008"/>
    <!-- assuming no offset in base link c of m, and that mesh is perfectly
         within bounds of collision cylinder -->
    <xacro:property name="wheel_z_offset" value="${base_height/2 - 0.0065}"/>

    <xacro:property name="caster_radius" value="0.0127"/>
    <!-- assuming no offset in base link c of m, and that mesh is perfectly
         within bounds of collision cylinder -->
    <xacro:property name="caster_z_offset"
                    value="${fabs(wheel_z_offset) + wheel_radius - caster_radius}"/>

    <xacro:property name="wheelbase_width" value="0.17923"/>
    <xacro:property name="wheelbase_length" value="0.12206"/>

    <material name="black">
        <color rgba="0 0 0 1"/>
    </material>

    <material name="white">
        <color rgba="1 1 1 1"/>
    </material>

    <material name="gray">
        <color rgba="0.6 0.6 0.6 0.5"/>
    </material>

    <link name="base_link">
        <visual>
            <geometry>
                <mesh filename="package://robot_description/meshes/base.STL"/>
            </geometry>
            <material name="gray"/>
        </visual>
        <collision>
            <geometry>
                <cylinder length="${base_height}" radius="${base_radius}"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="1.015"/>
            <!-- en.wikipedia.org/wiki/List_of_moments_of_inertia#List_of_3D_inertia_tensors -->
            <!-- 3D inertia tensor for solid cylinder -->
            <inertia ixx="0.00611" ixy="0" ixz="0" iyy="0.00611" iyz="0" izz="0.008937"/>
        </inertial>
    </link>

    <xacro:macro name="wheel" params="name parent_name reflect">
        <xacro:property name="link_name" value="${name}_link"/>
        <xacro:property name="joint_name" value="${parent_name}_to_${name}_joint"/>

        <link name="${link_name}">
            <visual>
                <geometry>
                    <cylinder length="${wheel_thickness}" radius="${wheel_radius}"/>
                </geometry>
                <material name="black"/>
            </visual>
            <collision>
                <geometry>
                    <cylinder length="${wheel_thickness}" radius="${wheel_radius}"/>
                </geometry>
            </collision>
            <inertial>
                <mass value="0.011398"/>
                <!-- 3d inertia tensor for solid cylinder -->
                <inertia ixx="${2.612e-6}" ixy="0" ixz="0" iyy="${2.612e-6}" iyz="0" izz="${5.103e-6}"/>
            </inertial>
        </link>


        <joint name="${joint_name}" type="continuous">
            <parent link="${parent_name}_link"/>
            <child link="${link_name}"/>
            <origin xyz="0 ${reflect*wheelbase_width/2} -${wheel_z_offset}"
                    rpy="${-reflect*pi/2} 0 0"/>
            <axis xyz="0 0 1"/>
        </joint>

        <!-- This block provides the simulator (Gazebo) with information on a few additional
        physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
        <gazebo reference="${link_name}">
            <mu1 value="200.0"/>
            <mu2 value="100.0"/>
            <kp value="10000000.0" />
            <kd value="1.0" />
            <material>Gazebo/Black</material>
        </gazebo>

        <transmission name="${name}_trans">
            <type>transmission_interface/SimpleTransmission</type>
            <actuator name="${name}_motor">
                <mechanicalReduction>51.45</mechanicalReduction>
            </actuator>
            <joint name="${joint_name}">
                <hardwareInterface>VelocityJointInterface</hardwareInterface>
            </joint>
        </transmission>
    </xacro:macro>
    <xacro:wheel name="left_wheel" parent_name="base" reflect="1"/>
    <xacro:wheel name="right_wheel" parent_name="base" reflect="-1"/>

    <xacro:macro name="caster" params="name parent_name reflect">
        <xacro:property name="link_name" value="${name}_link"/>

        <link name="${link_name}">
            <visual>
                <geometry>
                    <sphere radius="${caster_radius}"/>
                </geometry>
                <material name="white"/>
            </visual>
            <collision>
                <geometry>
                    <sphere radius="${caster_radius}"/>
                </geometry>
            </collision>
            <inertial>
                <mass value="0.015"/>
                <!-- 3d inertia tensor for solid sphere -->
                <inertia ixx="${9.677e-7}" ixy="0" ixz="0" iyy="${9.677e-7}" iyz="0" izz="${9.677e-7}"/>
            </inertial>
        </link>

        <joint name="${parent_name}_to_${name}_joint" type="fixed">
            <parent link="${parent_name}_link"/>
            <child link="${link_name}"/>
            <origin xyz="${reflect*wheelbase_length/2} 0 -${caster_z_offset}"/>
            <dynamics friction="0"/>
        </joint>

        <!-- This block provides the simulator (Gazebo) with information on a few additional
        physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
        <gazebo reference="${link_name}">
            <mu1 value="200.0"/>
            <mu2 value="100.0"/>
            <kp value="10000000.0" />
            <kd value="1.0" />
            <material>Gazebo/White</material>
        </gazebo>
    </xacro:macro>
    <xacro:caster name="front_caster" parent_name="base" reflect="1"/>
    <xacro:caster name="rear_caster" parent_name="base" reflect="-1"/>
</robot>

